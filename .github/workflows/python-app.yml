name: WiUDA Backend

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
    paths:
      - 'back-end/**'
      - 'front-end/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'back-end/**'
      - 'front-end/**'

jobs:
  security-scan:
    name: Bandit & pip-audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [back-end, front-end]
        python-version: ["3.12"]
    defaults:
      run:
        working-directory: ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
      
      - name: Run Bandit
        run: |
            bandit -r . -f json -o ./bandit-report-${{ matrix.service }}-${{ matrix.python-version }}.json || true
        continue-on-error: false
      # - name: Upload Bandit report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: bandit-report-${{ matrix.service }}-${{ matrix.python-version }}
      #     path: ./${{ matrix.service }}/bandit-report-${{ matrix.service }}-${{ matrix.python-version }}.json
      #     if-no-files-found: ignore
      
      - name: Run pip-audit dependency scan
        run: |
          pip-audit -f json -o ./pip-audit-report-${{ matrix.service }}-${{ matrix.python-version }}.json || true
      # Uploads need ACTIONS_RUNTIME_TOKEN
      # - name: Upload pip-audit report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pip-audit-report-${{ matrix.service }}-${{ matrix.python-version }}
      #     path: ./${{ matrix.service }}/pip-audit-report-${{ matrix.service }}-${{ matrix.python-version }}.json
      #     if-no-files-found: ignore
      
      #  Please login or register Safety CLI (free forever) to scan and secure your 
      #  projects with Safety
      # - name: Run Safety
        # run: |
          # safety scan --detailed-output --output json > ./safety-report-${{ matrix.service }}-${{ matrix.python-version }}.json || true
          # safety scan
      
      # - name: Upload Safety report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: safety-report-${{ matrix.service }}-${{ matrix.python-version }}
      #     path: ./safety-report-${{ matrix.service }}-${{ matrix.python-version }}.json
      #     if-no-files-found: ignore
      - name: Fail job if high severity found
        run: |
            if jq '.[] | select(.fix_versions? != null) | select(.severity == "HIGH")' ./pip-audit-report-${{ matrix.service }}-${{ matrix.python-version }}.json | grep -q .; then
              echo "High severity dependency vulnerability found, failing the job."
              exit 1
            fi
        shell: bash

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [back-end, front-end]
        python-version: ["3.12"]
    defaults:
      run:
        working-directory: ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [back-end, front-end]
        python-version: ["3.12"]
    defaults:
      run:
        working-directory: ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements_test.txt ]; then pip install -r requirements_test.txt; fi
        
      - name: Test Secrets
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        run: |
          echo "Postgres user is: $POSTGRES_USER"

      - name: Test with pytest
        env:
          POSTGRES_PASSWORD: alamakota
          POSTGRES_USER: board_games
          POSTGRES_DB: games
          POSTGRES_PORT: 5432
          APP_PORT: 5000
          SECRET_KEY: jwt
          JWT_KEY: jwt
        run: |
          pytest 

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test]
    strategy:
      matrix:
        service: [back-end, front-end]
    steps:
      - uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/wiuda:${{ matrix.service }}-latest
            ghcr.io/${{ github.actor }}/wiuda:${{ matrix.service }}-${{ github.sha }}